<?php namespace Sukohi\Paver;

use Illuminate\Support\Facades\Schema;
class Paver {

	private $_table, $_columns, $_format = '';
    
    public function __toString() {
    	
    	$return = '';
    	
    	if(empty($this->_columns)) {

			return $return;

    	} else if($this->_format == 'json' || $this->_format == 'array') {
    		
    		$return = json_encode($this->_columns);
    		
    		if($this->_format == 'array') {
    			
    			$return = '$columns = '. str_replace(array('"', ','), array('\'', ', '), $return) .';';
    			
    		}
    		
    		$return .= '<br>';
    		
    	} else {

    		$table_singular = str_singular($this->_table);
    		
    		foreach ($this->_columns as $column) {
    				
    			$targets = array(':column', ':table');
    			$replacements = array($column, $table_singular);
    			$return .= str_replace($targets, $replacements, $this->_format) .'<br>';
    				
    		}
    		
    	}
		
		return '<pre>/* Generated by Paver */<br><br>'. $return .'<br></pre>';
    	
    }
    
    public function table($table) {

    	$this->_table = $table;
    	$this->_columns = Schema::getColumnListing($this->_table);
    	return $this;
    	
    }
    
    public function format($format = '') {
    	
    	switch($format) {
    		
    		case 'argument':
    			$this->_format = '$:table->:column = $:column;';
    			break;
    		
    		case 'input':
    			$this->_format = '$:table->:column = Input::get(\':column\');';
    			break;
    		
    		case 'foreach':
    			$this->_format = '$:column = $:table->:column;';
    			break;
    		
    		case '':
    			$this->_format = '$:table->:column = \'\';';
    			break;
    			
    		default:
    			$this->_format = $format;
    		
    	}
    	
    	return $this;
    	
    }

}